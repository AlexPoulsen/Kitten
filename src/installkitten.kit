include "limits.h";
include "unistd.h";
include "sys/types.h";
include "sys/stat.h";
include "jansson.h";
include "errno.h";
import init;
import stringbuilder;


function main() {
    var rootInput: Ptr[Char] = *(mallocator.calloc(300)): Ptr[Char];
    printf("Enter folder Kit's root prelude and standard library is in with no slash after the directory.\nExample: If the root prelude path is `/usr/local/lib/kit/prelude.kit`, enter `/usr/local/lib/kit`.\nKit root directory: ");
    fgets(rootInput, 300, stdin);
    var root: StringBuilder = StringBuilder.newFromString(rootInput);
    if root.endsWith(c'\n') {
        root.removeChars(1);
    }
    if root.endsWith(c'/') {
        root.removeChars(1);
    }
    printf("Using root directory: `%s`\n", root.toString());
    createDirs(root.makeCopy());
    populateJSONDir(root.makeCopy());
    var kittenInstallDir: CString = root.makeCopy().appendString("/kitten/_kitten/").toString();
    chdir(kittenInstallDir);
    system(StringBuilder.newFromString("kitc -c -g \"/Users/macbookpro/kitten/src/kittencli.kit\" -l -ljansson -o kitten -D kittensettingsjson=\"\\\"").appendString(kittenInstallDir).returnWithString("kittensettings.json\\\"\""));
    system(StringBuilder.newFromString("rm -rf ").appendString(kittenInstallDir).appendString("build/").toString());
    var settingsStr: Ptr[Char] = null;
    var settingsJSON: Ptr[json_t] = json_object();
    json_object_set_new(settingsJSON, "root", json_string(root.toString()));
    settingsStr = json_dumps(settingsJSON, ${JSON_INDENT: function (Int) -> Int}(4));
    var fp: Ptr[FILE] = fopen(StringBuilder.newFromString(kittenInstallDir).appendString("kittensettings.json").toString(), "w");
    fprintf(fp, "%s", settingsStr);
    // printf("%s", settingsStr);
    fclose(fp);
    json_decref(settingsJSON);
    var symlinkInput: Ptr[Char] = *(mallocator.calloc(300)): Ptr[Char];
    printf("Enter folder on the shell PATH variable to symlink Kitten to: ");
    fgets(symlinkInput, 300, stdin);
    var symlinkDir: StringBuilder = StringBuilder.newFromString(symlinkInput);
    if symlinkDir.endsWith(c'\n') {
        symlinkDir.removeChars(1);
    }
    if symlinkDir.endsWith(c'/') {
        symlinkDir.removeChars(1);
    }
    var errno;
    var removeReturn: Int = remove(symlinkDir.returnWithString("/kitten"));
    if removeReturn != 0 {
        perror("Error in symlink deletion");
        // printf("%d\n", errno);
        // printf("%d\n", EACCES);
        // printf("%d\n", EEXIST);
        // printf("%d\n", EIO);
        // printf("%d\n", ELOOP);
        // printf("%d\n", ENAMETOOLONG);
        // printf("%d\n", ENOENT);
        // printf("%d\n", ENOSPC);
        // printf("%d\n", ENOTDIR);
        // printf("%d\n", EROFS);
        // printf("%d\n", ELOOP);
        // printf("%d\n", ENAMETOOLONG);
        errno = 0;
    }
    var symlinkReturn: Int = symlink(StringBuilder.newFromString(kittenInstallDir).returnWithString("kitten"), symlinkDir.returnWithString("/kitten"));
    if symlinkReturn != 0 {
        perror("Error in symlink creation");
        printf("%s -> %s\n", StringBuilder.newFromString(kittenInstallDir).returnWithString("kitten"), symlinkDir.returnWithString("/kitten"));
        // printf("%d\n", errno);
        // printf("%d\n", EACCES);
        // printf("%d\n", EEXIST);
        // printf("%d\n", EIO);
        // printf("%d\n", ELOOP);
        // printf("%d\n", ENAMETOOLONG);
        // printf("%d\n", ENOENT);
        // printf("%d\n", ENOSPC);
        // printf("%d\n", ENOTDIR);
        // printf("%d\n", EROFS);
        // printf("%d\n", ELOOP);
        // printf("%d\n", ENAMETOOLONG);
        errno = 0;
    }
}
