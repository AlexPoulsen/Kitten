import arguments.*;
import stringbuilder;
import getpackage;
include "signal.h";


struct InstallHandler {
    var packages: Vector[CString];
    var verbose: Bool = false;
    var silent: Bool = false;
    var root: StringBuilder;

    static function new(root: StringBuilder): InstallHandler {
        return struct Self {
            packages: Vector.new(10),
            verbose: false,
            silent: false,
            root
        };
    }
}


implement Handler for InstallHandler {
    function nothing(cmd: Command): Void {
        printf("empty input\n");
    }

    function extra(choice: Choice, args: Arguments): Void {
        var capacity: Int = 256;
        var str: Ptr[Char] = *(mallocator.calloc(capacity)): Ptr[Char];
        snprintf(str, capacity, "%s", choice.strVal);
        this.packages.push(str);
    }

    function end(cmd: Command): Void {
        printf("Installing packages: ");
        for n in 0 ... this.packages.length - 1 {
            printf("%s, ", this.packages[n]);
        }
        printf("%s\n", this.packages[this.packages.length - 1]);
        updatePackageJSONs(this.root.makeCopy());
        for n in 0 ... this.packages.length {
            installPackage(this.packages[n], this.root.makeCopy());
        }
    }

    function arg(choice: Choice, arg: Argument, args: Arguments): Void {
        match arg.shortName {
            c'v' => {
                this.verbose = true;
            }
            c's' => {
                this.verbose = false;
                this.silent = true;
            }
            default => {
                printf("%s: ", arg.longName);
                choice.printLn();
            }
        }
    }
}


struct UninstallHandler {
    var packages: Vector[CString];
    var verbose: Bool = false;
    var silent: Bool = false;
    var root: StringBuilder;

    static function new(root: StringBuilder): UninstallHandler {
        return struct Self {
            packages: Vector.new(10),
            verbose: false,
            silent: false,
            root
        };
    }
}


implement Handler for UninstallHandler {
    function nothing(cmd: Command): Void {
        printf("empty input\n");
    }

    function extra(choice: Choice, args: Arguments): Void {
        var capacity: Int = 256;
        var str: Ptr[Char] = *(mallocator.calloc(capacity)): Ptr[Char];
        snprintf(str, capacity, "%s", choice.strVal);
        this.packages.push(str);
    }

    function end(cmd: Command): Void {
        printf("Uninstalling packages: ");
        for n in 0 ... this.packages.length - 1 {
            printf("%s, ", this.packages[n]);
        }
        printf("%s\n", this.packages[this.packages.length - 1]);
        for n in 0 ... this.packages.length {
            uninstallPackage(this.packages[n], this.root.makeCopy());
        }
    }

    function arg(choice: Choice, arg: Argument, args: Arguments): Void {
        match arg.shortName {
            c'v' => {
                this.verbose = true;
            }
            c's' => {
                this.verbose = false;
                this.silent = true;
            }
            default => {
                printf("%s: ", arg.longName);
                choice.printLn();
            }
        }
    }
}


struct UpdateHandler {
    var packages: Vector[CString];
    var verbose: Bool = false;
    var silent: Bool = false;
    var root: StringBuilder;

    static function new(root: StringBuilder): UpdateHandler {
        return struct Self {
            packages: Vector.new(10),
            verbose: false,
            silent: false,
            root
        };
    }
}


implement Handler for UpdateHandler {
    function nothing(cmd: Command): Void {
        printf("empty input\n");
    }

    function extra(choice: Choice, args: Arguments): Void {
        var capacity: Int = 256;
        var str: Ptr[Char] = *(mallocator.calloc(capacity)): Ptr[Char];
        snprintf(str, capacity, "%s", choice.strVal);
        this.packages.push(str);
    }

    function end(cmd: Command): Void {
        if this.packages.length > 0 {
            printf("Updating packages: ");
            for n in 0 ... this.packages.length - 1 {
                printf("%s, ", this.packages[n]);
            }
            printf("%s\n", this.packages[this.packages.length - 1]);
            updatePackageJSONs(this.root.makeCopy());
            for n in 0 ... this.packages.length {
                updatePackage(this.packages[n], this.root.makeCopy());
            }
        } else {
            printf("`kitten update package` is used for updating packages. Use `kitten upgrade` to update Kitten.");
        }
    }

    function arg(choice: Choice, arg: Argument, args: Arguments): Void {
        match arg.shortName {
            c'v' => {
                this.verbose = true;
            }
            c's' => {
                this.verbose = false;
                this.silent = true;
            }
            default => {
                printf("%s: ", arg.longName);
                choice.printLn();
            }
        }
    }
}


struct UpgradeHandler {
    var hasBeenCalled: Bool = false;
    var verbose: Bool = false;
    var silent: Bool = false;
    var root: StringBuilder;

    static function new(root: StringBuilder): UpgradeHandler {
        return struct Self {
            hasBeenCalled: false,
            verbose: false,
            silent: false,
            root
        };
    }
}


implement Handler for UpgradeHandler {
    function nothing(cmd: Command): Void {
        printf("empty input\n");
    }

    function extra(choice: Choice, args: Arguments): Void {
        this.hasBeenCalled = true;
    }

    function end(cmd: Command): Void {
        if this.hasBeenCalled {
            printf("`kitten upgrade` is used to update Kitten. Use `kitten update package` to update a package.\n");
        } else {
            printf("Upgrading Kitten\n");
        }
    }

    function arg(choice: Choice, arg: Argument, args: Arguments): Void {
        match arg.shortName {
            c'v' => {
                this.verbose = true;
            }
            c's' => {
                this.verbose = false;
                this.silent = true;
            }
            default => {
                printf("%s: ", arg.longName);
                choice.printLn();
            }
        }
    }
}


struct HelpHandler {
    var commands: Vector[CString];
    var kittenCommands: Vector[CString];

    static function new(): HelpHandler {
        var commandVec: Vector[CString]  = Vector.new(10);
            commandVec.push("install");
            commandVec.push("uninstall");
            commandVec.push("update");
            commandVec.push("upgrade");
            commandVec.push("help");
        return struct Self {
            commands: Vector.new(10),
            kittenCommands: commandVec
        };
    }
}


implement Handler for HelpHandler {
    function nothing(cmd: Command): Void {
        printf("empty input\n");
    }

    function extra(choice: Choice, args: Arguments): Void {
        var capacity: Int = 256;
        var str: Ptr[Char] = *(mallocator.calloc(capacity)): Ptr[Char];
        snprintf(str, capacity, "%s", choice.strVal);
        this.commands.push(str);
    }

    function end(cmd: Command): Void {
        for n in 0 ... this.commands.length {
            match lowercase(this.commands[n]) {
                "install" => {
                    printf("`kitten install mypackage package2` installs one or more packages.\n");
                }
                "uninstall" => {
                    printf("`kitten uninstall mypackage package2` uninstalls one or more packages.\n");
                }
                "update" => {
                    printf("`kitten update mypackage package2` updates one or more packages.\n");
                }
                "upgrade" => {
                    printf("`kitten upgrade` updates Kitten.\n");
                }
                "help" => {
                    printf("`kitten help command` gets help with a command.\n");
                }
                "all" => {
                    printf("`kitten install mypackage package2`   installs one or more packages.\n");
                    printf("`kitten uninstall mypackage package2` uninstalls one or more packages.\n");
                    printf("`kitten update mypackage package2`    updates one or more packages.\n");
                    printf("`kitten upgrade`                      updates Kitten.\n");
                    printf("`kitten help command`                 gets help with a command.\n");
                }
                default => {
                    var distancesStr: Array[CString] = Array.new(this.kittenCommands.length + 2);
                    var distancesInt: Array[Uint] = Array.new(this.kittenCommands.length + 2);
                    var counter: Int = 0;
                    var min: Int = 0;
                    var min2: Int = 0;
                    for cmd in this.kittenCommands {
                        distancesStr[counter] = cmd;
                        distancesInt[counter] = levenshtein(cmd, this.commands[n]);
                        counter++;
                    }
                    counter: Int = 0;
                    for dist in distancesInt {
                        if dist > 0 {
                            if dist < distancesInt[min] {
                                min = counter;
                            }
                            counter++;
                        }
                    }
                    // for d in 0 ... counter {
                    //     printf("%s %d\n", distancesStr[d], distancesInt[d]);
                    // }
                    // printf("%d, %d\n", min);
                    // if min == min2 {
                    //     printf("Did you mean `%s`?\n\n", this.commands[min]);
                    // } else {
                    //     printf("Did you mean `%s` or `%s`?\n\n", this.commands[min], this.commands[min2]);
                    // }
                    printf("`%s` is not a valid Kitten command.\n", this.commands[n]);
                    printf("Did you mean one of these?\n");
                    for d in 0 ... counter {
                        if distancesInt[d] < distancesInt[min] + 2 {
                            match distancesStr[d] {
                                "install" => {
                                    printf("`kitten install mypackage package2` installs one or more packages.\n");
                                }
                                "uninstall" => {
                                    printf("`kitten uninstall mypackage package2` uninstalls one or more packages.\n");
                                }
                                "update" => {
                                    printf("`kitten update mypackage package2` updates one or more packages.\n");
                                }
                                "upgrade" => {
                                    printf("`kitten upgrade` updates Kitten.\n");
                                }
                                "help" => {
                                    printf("`kitten help command` gets help with a command.\n");
                                }
                                "all" => {
                                    printf("`kitten install mypackage package2`   installs one or more packages.\n");
                                    printf("`kitten uninstall mypackage package2` uninstalls one or more packages.\n");
                                    printf("`kitten update mypackage package2`    updates one or more packages.\n");
                                    printf("`kitten upgrade`                      updates Kitten.\n");
                                    printf("`kitten help command`                 gets help with a command.\n");
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    function arg(choice: Choice, arg: Argument, args: Arguments): Void {
    }
}


struct PlainHandler {
    var hasBeenCalled: Bool = false;
    var commands: Vector[CString];
    var calledCommand: CString;
    var restOfCall: StringBuilder = StringBuilder.new(30);

    static function new(): PlainHandler {
        var commandVec: Vector[CString]  = Vector.new(10);
            commandVec.push("install");
            commandVec.push("uninstall");
            commandVec.push("update");
            commandVec.push("upgrade");
            commandVec.push("help");
        return struct Self {
            hasBeenCalled: false,
            commands: commandVec
        };
    }
}


implement Handler for PlainHandler {
    function nothing(cmd: Command): Void {
        printf("empty input\n");
    }

    function extra(choice: Choice, args: Arguments): Void {
        if !this.hasBeenCalled {
            this.calledCommand = choice.strVal;
            this.hasBeenCalled = true;
        } else {
            this.restOfCall.appendString(choice.strVal);
        }
    }

    function end(cmd: Command): Void {
        if this.hasBeenCalled {
            var distancesStr: Array[CString] = Array.new(this.commands.length + 2);
            var distancesInt: Array[Uint] = Array.new(this.commands.length + 2);
            var counter: Int = 0;
            var min: Int = 0;
            var min2: Int = 0;
            for cmd in this.commands {
                distancesStr[counter] = cmd;
                distancesInt[counter] = levenshtein(cmd, this.calledCommand);
                counter++;
            }
            counter: Int = 0;
            for dist in distancesInt {
                if dist > 0 {
                    if dist < distancesInt[min] {
                        min = counter;
                    }
                    counter++;
                }
            }
            // for d in 0 ... counter {
            //     printf("%s %d\n", distancesStr[d], distancesInt[d]);
            // }
            // printf("%d, %d\n", min);
            // if min == min2 {
            //     printf("Did you mean `%s`?\n\n", this.commands[min]);
            // } else {
            //     printf("Did you mean `%s` or `%s`?\n\n", this.commands[min], this.commands[min2]);
            // }
            printf("Did you mean one of these?\n");
            for d in 0 ... counter {
                if distancesInt[d] < distancesInt[min] + 2 {
                    printf("`kitten %s %s`\n", distancesStr[d], this.restOfCall.toString());
                }
            }
            printf("\n----------------------------------------------------------------------\n");
            printf("`kitten install mypackage package2`   installs one or more packages.\n");
            printf("`kitten uninstall mypackage package2` uninstalls one or more packages.\n");
            printf("`kitten update mypackage package2`    updates one or more packages.\n");
            printf("`kitten upgrade`                      updates Kitten.\n");
            printf("`kitten help command`                 gets help with a command.\n");
        }
    }

    function arg(choice: Choice, arg: Argument, args: Arguments): Void {
        this.hasBeenCalled = true;
        this.restOfCall.appendString(" --").appendString(arg.longName).appendString(" ");
        var temp: Ptr[Char] = *(mallocator.calloc(100)): Ptr[Char];
        match choice.which {
            INT => snprintf(temp, 100, "%d", choice.intVal);
            STR => snprintf(temp, 100, "%s", choice.strVal);
            BOOL => snprintf(temp, 100, "%s", if choice.boolVal then "true" else "false");
            FLOAT => snprintf(temp, 100, "%f", choice.floatVal);
            NONE => sprintf(temp, "No value");
        }
        this.restOfCall.appendCharPtr(temp, 100);
    }
}


function min3(a: Int, b: Int, c: Int): Int {
    return if a < b then (if a < c then a else c) else (if b < c then b else c);
}

function levenshtein(s1: Ptr[Char], s2: Ptr[Char]): Int {
    var s1len: Uint = strlen(s1);
    var s2len: Uint = strlen(s2);
    var x: Uint;
    var y: Uint;
    var lastdiag: Uint;
    var olddiag: Uint;
    var column: Array[Uint] = Array.new(s1len + 1);
    for y in 1 ... s1len + 1 {
        column[y] = y;
    }
    // for c in column {
    //     printf("%d ", c);
    // }
    // printf("\n");
    for x in 1 ... s2len + 1 {
        column[0] = x;
        // printf("%d  ", x);
        lastdiag = x - 1;
        for y in 1 ... s1len + 1 {
            olddiag = column[y];
            column[y] = min3(column[y] + 1, column[y - 1] + 1, lastdiag + (if s1[y - 1] == s2[x - 1] then 0 else 1));
            lastdiag = olddiag;
            // printf("(%d,%d,%d min %d)  ", column[y] + 1, column[y - 1] + 1, lastdiag + (if s1[y - 1] == s2[x - 1] then 0 else 1), column[y]);
        }
        // printf("\n");
    }
    // for c in column {
    //     printf("%d ", c);
    // }
    // printf("\n");
    return(column[s1len]);
}


function main(argc: Int, argv: Ptr[Ptr[Char]]) {
    var fp: Ptr[FILE] = fopen(${kittensettingsjson: CString}, "r");
    var lSize: Int64;
    var buffer: Ptr[Char];
    var jsonData: Ptr[json_t];
    var jsonError: json_error_t;
    var run: Bool = false;
    var root: StringBuilder;

    if fp == null {
        perror("Error opening `kittensettings.json`");
    } else {
        // printf("Opened `kittensettings.json` successfully\n");
        fseek(fp, 0, SEEK_END);
        lSize = ftell(fp);
        rewind(fp);
        buffer = calloc(1, lSize+1);
        if 1 != fread(buffer, lSize, 1 , fp) {
            fclose(fp);
            free(buffer);
            fputs("`kittensettings.json` read fails\n", stderr);
        } else {
            jsonData = json_loads(buffer, 0, &jsonError);
            fclose(fp);
            free(buffer);
            if jsonData.type == JSON_OBJECT {
                var jsonData_root: Ptr[json_t] = json_object_get(jsonData, "root");
                if jsonData_root.type == JSON_STRING {
                    root = StringBuilder.newFromString(json_string_value(jsonData_root));
                    run = true;
                } else {
                    printf("Error: no root directory in `kittensettings.json`");
                }
            }
        }
    }

    if run {
        var installH:   InstallHandler   = InstallHandler.new(   root.makeCopy());
        var uninstallH: UninstallHandler = UninstallHandler.new( root.makeCopy());
        var updateH:    UpdateHandler    = UpdateHandler.new(    root.makeCopy());
        var upgradeH:   UpgradeHandler   = UpgradeHandler.new(   root.makeCopy());
        var helpH:      HelpHandler      = HelpHandler.new();
        var plainH:     PlainHandler     = PlainHandler.new();

        var installA:   Arguments        = Arguments.new(installH);
        installA.add(   c'v', "verbose", Choice.new(), "adds verbose debugging `printf`s",               no_argument);
        installA.add(   c's', "silent",  Choice.new(), "disables all `printf`s, overrides -v/--verbose", no_argument);

        var uninstallA: Arguments        = Arguments.new(uninstallH);
        uninstallA.add( c'v', "verbose", Choice.new(), "adds verbose debugging `printf`s",               no_argument);
        uninstallA.add( c's', "silent",  Choice.new(), "disables all `printf`s, overrides -v/--verbose", no_argument);

        var updateA:    Arguments        = Arguments.new(updateH);
        updateA.add(    c'v', "verbose", Choice.new(), "adds verbose debugging `printf`s",               no_argument);
        updateA.add(    c's', "silent",  Choice.new(), "disables all `printf`s, overrides -v/--verbose", no_argument);

        var upgradeA:   Arguments        = Arguments.new(upgradeH);
        upgradeA.add(   c'v', "verbose", Choice.new(), "adds verbose debugging `printf`s",               no_argument);
        upgradeA.add(   c's', "silent",  Choice.new(), "disables all `printf`s, overrides -v/--verbose", no_argument);

        var helpA:      Arguments        = Arguments.new(helpH);
        var plainA:     Arguments        = Arguments.new(plainH);

        var command:    Command          = Command.new(plainA);
        command.addSubcommand("install",   installA);
        command.addSubcommand("uninstall", uninstallA);
        command.addSubcommand("update",    updateA);
        command.addSubcommand("upgrade",   upgradeA);
        command.addSubcommand("help",      helpA);

        command.process(argc, argv);
    } else {
        printf("Kitten's `kittensettings.json` is missing or damaged. If you are not able to fix the file, delete the directory containing Kitten and its packages and reinstall.");
    }
}
